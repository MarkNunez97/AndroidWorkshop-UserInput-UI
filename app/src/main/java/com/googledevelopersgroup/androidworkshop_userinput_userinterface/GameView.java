package com.googledevelopersgroup.androidworkshop_userinput_userinterface;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.util.DisplayMetrics;import android.util.Log;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;import android.view.View;import com.googledevelopersgroup.androidworkshop_userinput_userinterface.Character.FallingObjectManager;import com.googledevelopersgroup.androidworkshop_userinput_userinterface.Character.GameCharacter;import com.googledevelopersgroup.androidworkshop_userinput_userinterface.Character.MainCharacter;import java.util.Collection;import java.util.List;/** * Represents the game-view where the user is going to interact with the game. */public class GameView extends SurfaceView implements SurfaceHolder.Callback, GameObserver {    DisplayMetrics displayMetrics;    private final int SCREEN_HEIGHT;    private final int SCREEN_WIDTH;    private final String TAG = "GameView";    private GamingThread gamingThread;    private FallingObjectManager fallingObjectManager;    private GameCharacter mainCharacter;    private GameCharacter asteroid;    @SuppressLint("ClickableViewAccessibility")    public GameView(Context context) {        super(context);        this.setOnTouchListener(new OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                int action = event.getActionMasked();                switch (action){                    case MotionEvent.ACTION_DOWN:                        mainCharacter.update((int) event.getX(), 0);                    case MotionEvent.ACTION_MOVE:                        mainCharacter.update((int) event.getX(), 0);                }                return true;            }        });        displayMetrics = new DisplayMetrics();        ((Activity)context).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);        SCREEN_HEIGHT = (displayMetrics.heightPixels - 300);        SCREEN_WIDTH = (displayMetrics.widthPixels - 300);        fallingObjectManager = new FallingObjectManager(3);        getHolder().addCallback(this);        gamingThread = new GamingThread(getHolder(), this, fallingObjectManager);        setFocusable(true);        mainCharacter = new MainCharacter(                Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.spaceship),                        300,300,false)                , SCREEN_WIDTH/2, SCREEN_HEIGHT);    }    @Override    public void surfaceCreated(SurfaceHolder holder) {        gamingThread.setRunning(true);        gamingThread.start();    }    @Override    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {        Log.d(TAG, "Surface Changed");    }    @Override    public void surfaceDestroyed(SurfaceHolder holder) {        try {            gamingThread.setRunning(false);            gamingThread.join();        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Override    public void draw(Canvas canvas) {        super.draw(canvas);        if (canvas != null) {            canvas.drawBitmap(                    BitmapFactory.decodeResource(getResources(),                            R.drawable.space),0,0,null);            mainCharacter.draw(canvas);        }    }    public void update() {    }}